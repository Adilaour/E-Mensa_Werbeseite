CREATE SCHEMA emensawerbeseite
CHARACTER SET UTF8mb4
COLLATE utf8mb4_unicode_ci;
USE emensawerbeseite;

-- MEILENSTEIN 3

-- M3.4.1   | emensawerbeseite-Schema aufbauen
DROP TABLE gericht;
CREATE TABLE gericht(
    id                  BIGINT PRIMARY KEY AUTO_INCREMENT,          -- BIGINT ist gleich int8 aus der Aufgabenstellung / Synonym
    name                VARCHAR(80) NOT NULL UNIQUE,
    beschreibung        VARCHAR(800) NOT NULL,
    erfasst_am          DATE NOT NULL,
    vegetarisch         BOOLEAN NOT NULL DEFAULT FALSE,
    vegan               BOOLEAN NOT NULL DEFAULT FALSE,
    preis_intern        DOUBLE NOT NULL,
    preis_extern        DOUBLE NOT NULL CHECK ( preis_intern <= preis_extern )
);
DROP TABLE allergen;
CREATE TABLE allergen(
    code                CHAR(4) PRIMARY KEY,
    name                VARCHAR(300) NOT NULL,
    typ                 VARCHAR(20) NOT NULL
);
DROP TABLE kategorie;
CREATE Table kategorie(
    id                  BIGINT PRIMARY KEY,
    name                VARCHAR(80) NOT NULL,
    eltern_id           BIGINT REFERENCES kategorie(id),
    bildname            VARCHAR(200)
);
DROP TABLE gericht_hat_allergen;
CREATE TABLE gericht_hat_allergen(
    code                CHAR(4) REFERENCES allergen(code),
    gericht_id          BIGINT NOT NULL REFERENCES gericht(id)
);
DROP TABLE gericht_hat_kategorie;
CREATE TABLE gericht_hat_kategorie(
    gericht_id          BIGINT NOT NULL REFERENCES gericht(id),
    kategorie_id        BIGINT NOT NULL REFERENCES kategorie(id)
);
-- M3.4.4   | Inhalte der werbeseiten_daten.sql-Datei einlesen
INSERT INTO `allergen` (`code`, `name`, `typ`) VALUES
('a', 'Getreideprodukte', 'Getreide (Gluten)'),
('a1', 'Weizen', 'Allergen'),
('a2', 'Roggen', 'Allergen'),
('a3', 'Gerste', 'Allergen'),
('a4', 'Dinkel', 'Allergen'),
('a5', 'Hafer', 'Allergen'),
('a6', 'Dinkel', 'Allergen'),
('b', 'Fisch', 'Allergen'),
('c', 'Krebstiere', 'Allergen'),
('d', 'Schwefeldioxid/Sulfit', 'Allergen'),
('e', 'Sellerie', 'Allergen'),
('f', 'Milch und Laktose', 'Allergen'),
('f1', 'Butter', 'Allergen'),
('f2', 'Käse', 'Allergen'),
('f3', 'Margarine', 'Allergen'),
('g', 'Sesam', 'Allergen'),
('h', 'Nüsse', 'Allergen'),
('h1', 'Mandeln', 'Allergen'),
('h2', 'Haselnüsse', 'Allergen'),
('h3', 'Walnüsse', 'Allergen'),
('i', 'Erdnüsse', 'Allergen');
INSERT INTO `gericht` (`id`, `name`, `beschreibung`, `erfasst_am`, `vegan`, `vegetarisch`, `preis_intern`, `preis_extern`) VALUES
(1, 'Bratkartoffeln mit Speck und Zwiebeln', 'Kartoffeln mit Zwiebeln und gut Speck', '2020-08-25', 0, 0, 2.3, 4),
(3, 'Bratkartoffeln mit Zwiebeln', 'Kartoffeln mit Zwiebeln und ohne Speck', '2020-08-25', 1, 1, 2.3, 4),
(4, 'Grilltofu', 'Fein gewürzt und mariniert', '2020-08-25', 1, 1, 2.5, 4.5),
(5, 'Lasagne', 'Klassisch mit Bolognesesoße und Creme Fraiche', '2020-08-24', 0, 0, 2.5, 4.5),
(6, 'Lasagne vegetarisch', 'Klassisch mit Sojagranulatsoße und Creme Fraiche', '2020-08-24', 0, 1, 2.5, 4.5),
(7, 'Hackbraten', 'Nicht nur für Hacker', '2020-08-25', 0, 0, 2.5, 4),
(8, 'Gemüsepfanne', 'Gesundes aus der Region, deftig angebraten', '2020-08-25', 1, 1, 2.3, 4),
(9, 'Hühnersuppe', 'Suppenhuhn trifft Petersilie', '2020-08-25', 0, 0, 2, 3.5),
(10, 'Forellenfilet', 'mit Kartoffeln und Dilldip', '2020-08-22', 0, 0, 3.8, 5),
(11, 'Kartoffel-Lauch-Suppe', 'der klassische Bauchwärmer mit frischen Kräutern', '2020-08-22', 0, 1, 2, 3),
(12, 'Kassler mit Rosmarinkartoffeln', 'dazu Salat und Senf', '2020-08-23', 0, 0, 3.8, 5.2),
(13, 'Drei Reibekuchen mit Apfelmus', 'grob geriebene Kartoffeln aus der Region', '2020-08-23', 0, 1, 2.5, 4.5),
(14, 'Pilzpfanne', 'die legendäre Pfanne aus Pilzen der Saison', '2020-08-23', 0, 1, 3, 5),
(15, 'Pilzpfanne vegan', 'die legendäre Pfanne aus Pilzen der Saison ohne Käse', '2020-08-24', 1, 1, 3, 5),
(16, 'Käsebrötchen', 'schmeckt vor und nach dem Essen', '2020-08-24', 0, 1, 1, 1.5),
(17, 'Schinkenbrötchen', 'schmeckt auch ohne Hunger', '2020-08-25', 0, 0, 1.25, 1.75),
(18, 'Tomatenbrötchen', 'mit Schnittlauch und Zwiebeln', '2020-08-25', 1, 1, 1, 1.5),
(19, 'Mousse au Chocolat', 'sahnige schweizer Schokolade rundet jedes Essen ab', '2020-08-26', 0, 1, 1.25, 1.75),
(20, 'Suppenkreation á la Chef', 'was verschafft werden muss, gut und günstig', '2020-08-26', 0, 0, 0.5, 0.9);
INSERT INTO `gericht_hat_allergen` (`code`, `gericht_id`) VALUES
('h', 1),
('a3', 1),
('a4', 1),
('f1', 3),
('a6', 3),
('i', 3),
('a3', 4),
('f1', 4),
('a4', 4),
('h3', 4),
('d', 6),
('h1',7),
('a2', 7),
('h3', 7),
('c', 7),
('a3', 8),
('h3', 10),
('d', 10),
('f', 10),
('f2', 12),
('h1', 12),
('a5',12),
('c', 1),
('a2', 9),
('i', 14),
('f1', 1),
('a1', 15),
('a4', 15),
('i', 15),
('f3', 15),
('h3', 15);
INSERT INTO `kategorie` (`id`, `eltern_id`, `name`, `bildname`) VALUES
(1, NULL, 'Aktionen', 'kat_aktionen.png'),
(2, NULL, 'Menus', 'kat_menu.gif'),
(3, 2, 'Hauptspeisen', 'kat_menu_haupt.bmp'),
(4, 2, 'Vorspeisen', 'kat_menu_vor.svg'),
(5, 2, 'Desserts', 'kat_menu_dessert.pic'),
(6, 1, 'Mensastars', 'kat_stars.tif'),
(7, 1, 'Erstiewoche', 'kat_erties.jpg');
INSERT INTO `gericht_hat_kategorie` (`kategorie_id`, `gericht_id`) VALUES
(3, 1),	(3, 3),	(3, 4),	(3, 5),	(3, 6),	(3, 7),	(3, 9),	(4, 16), (4, 17), (4, 18), (5, 16), (5, 17), (5, 18);
-- M3.4.5   | Einträge in jeder Tabelle zählen
SELECT COUNT(code) FROM allergen;
SELECT COUNT(id) FROM gericht;
SELECT COUNT(code) FROM gericht_hat_allergen;
SELECT COUNT(gericht_id) FROM gericht_hat_kategorie;
SELECT COUNT(id) FROM kategorie;

-- M3.5     | Random Statements zur leichten (manuellen) Manipulation der Tabellen
-- M3.5.1
SELECT * FROM gericht;
-- M3.5.2
SELECT erfasst_am FROM gericht;
-- M3.5.3
SELECT name AS Gerichtname, erfasst_am FROM gericht ORDER BY name DESC;
-- M3.5.4
SELECT name, beschreibung FROM gericht ORDER BY name LIMIT 5;
-- M3.5.5
SELECT name, beschreibung FROM gericht ORDER BY name LIMIT 10 OFFSET 5;
-- M3.5.6
SELECT DISTINCT typ FROM allergen;
-- M3.5.7
SELECT name FROM gericht WHERE name LIKE 'K%';
-- M3.5.8
SELECT id, name FROM gericht WHERE name LIKE '%suppe%';
-- M3.5.9
SELECT * FROM kategorie WHERE eltern_id IS NULL;
-- M3.5.10
SELECT g.name AS Gerichtname, GROUP_CONCAT(a.name) AS Allergen FROM gericht g JOIN gericht_hat_allergen gha ON g.id = gha.gericht_id JOIN allergen a ON a.code = gha.code GROUP BY g.name;
SELECT g.name AS Gerichtname, GROUP_CONCAT(a.name) AS Allergen FROM gericht g, allergen a, gericht_hat_allergen gha WHERE g.id = gha.gericht_id AND a.code = gha.code GROUP BY g.name;
-- M3.5.11
SELECT g.name AS Gerichtname, GROUP_CONCAT(a.name) AS Allergen FROM gericht g LEFT JOIN gericht_hat_allergen gha ON gha.gericht_id = g.id LEFT JOIN allergen a ON gha.code = a.code GROUP BY g.name;
-- M3.5.12
SELECT a.name AS Allergen, GROUP_CONCAT(g.name) AS Gerichtname FROM gericht g LEFT JOIN gericht_hat_allergen gha ON gha.gericht_id = g.id RIGHT JOIN allergen a ON gha.code = a.code GROUP BY a.name;
-- M3.5.13
SELECT k.name AS Kategoriename,count(ghk.gericht_id) AS Anzahl FROM kategorie k LEFT JOIN gericht_hat_kategorie ghk ON k.id = ghk.kategorie_id GROUP BY k.name ORDER BY Anzahl ASC;
-- M3.5.14
SELECT k.name AS Kategoriename,count(ghk.gericht_id) AS Anzahl FROM kategorie k LEFT JOIN gericht_hat_kategorie ghk ON k.id = ghk.kategorie_id GROUP BY k.name HAVING Anzahl > 2 ORDER BY Anzahl ASC;
-- M3.5.15
UPDATE allergen SET name = 'Kamut' WHERE code = 'a6';
-- M3.5.16
INSERT INTO gericht (name, beschreibung, erfasst_am, vegetarisch, vegan, preis_intern, preis_extern) VALUES ('Currywurst Pommes', '', '2020-11-18', 0, 0,2.5, 3.5);
INSERT INTO gericht_hat_kategorie (gericht_id, kategorie_id) VALUES (21,3);
-- M3.5.17
SELECT g.name, count(gha.gericht_id) AS Anzahl_der_Allergene FROM gericht g, gericht_hat_allergen gha WHERE g.id = gha.gericht_id GROUP BY g.name HAVING Anzahl_der_Allergene >3 ORDER BY Anzahl_der_Allergene ASC;
SELECT g.name AS Gerichtname, g.preis_intern AS preisintern, g.preis_extern AS preisextern, GROUP_CONCAT(a.code) AS Allergen FROM gericht g, allergen a, gericht_hat_allergen gha WHERE g.id = gha.gericht_id AND a.code = gha.code GROUP BY g.name LIMIT 5;

-- MEILENSTEIN 4 --

-- M4.1.2
DROP TABLE wunschgerichte;

CREATE TABLE erstellerInnen(
    erstellerInnen_id   BIGINT AUTO_INCREMENT PRIMARY KEY,
    email               VARCHAR(50) UNIQUE,
    name                VARCHAR(50) NOT NULL DEFAULT 'anonym'
);
DROP TABLE  erstellerInnen;
CREATE TABLE wunschgerichte(
    nummer              BIGINT AUTO_INCREMENT PRIMARY KEY,
    bezeichnung         VARCHAR(50) NOT NULL,
    beschreibung        VARCHAR(3000) NOT NULL,
    erstellungsdatum    DATETIME NOT NULL,
    erstellerIn         BIGINT NOT NULL,
    CONSTRAINT erstellerInnen_FK FOREIGN KEY (erstellerIn) REFERENCES erstellerInnen(erstellerInnen_id)
);
-- M.4.1.6
SELECT wg.bezeichnung AS Wunschgericht, wg.beschreibung AS Beschreibung, eI.name AS ErstellerIn, eI.email AS EMail FROM wunschgerichte wg LEFT JOIN erstellerInnen eI on eI.erstellerInnen_id = wg.erstellerIn ORDER BY wg.erstellungsdatum DESC LIMIT 5;

-- M4.8.1
ALTER TABLE gericht_hat_kategorie ADD CONSTRAINT uq_gericht_id_kategorie_id UNIQUE (gericht_id, kategorie_id);
-- M4.8.2
ALTER TABLE gericht ADD INDEX id_gericht_name (name);
-- M4.8.3
ALTER TABLE gericht_hat_allergen
    DROP FOREIGN KEY gericht_hat_allergen_ibfk_2;
ALTER TABLE gericht_hat_allergen
    ADD CONSTRAINT gericht_hat_allergoren_ibfk_2 FOREIGN KEY (gericht_id) REFERENCES gericht(id) ON DELETE CASCADE;
ALTER TABLE gericht_hat_kategorie
    DROP FOREIGN KEY gericht_hat_kategorie_ibfk_1;
ALTER TABLE gericht_hat_kategorie
    ADD CONSTRAINT gericht_hat_kategorie_ibfk_1 FOREIGN KEY (gericht_id) REFERENCES gericht(id) ON DELETE CASCADE;
-- M4.8.5
ALTER TABLE gericht_hat_allergen
    DROP FOREIGN KEY gericht_hat_allergen_ibfk_1;
ALTER TABLE gericht_hat_allergen
    ADD CONSTRAINT gericht_hat_allergen_ibfk_1 FOREIGN KEY (code) REFERENCES allergen(code) ON UPDATE CASCADE;
-- M4.8.6
ALTER TABLE gericht_hat_kategorie
ADD PRIMARY KEY(gericht_id, kategorie_id);

-- MEILENSTEIN 5

-- M5.1.1
DROP TABLE benutzer;
CREATE TABLE benutzer(
    id                BIGINT PRIMARY KEY AUTO_INCREMENT,
    email             VARCHAR(100) NOT NULL UNIQUE,
    passwort          VARCHAR(200) NOT NULL,
    admin             BOOLEAN DEFAULT FALSE,
    anzahlfehler      INTEGER NOT NULL DEFAULT 0,
    anzahlanmeldungen INTEGER NOT NULL,
    letzteanmeldung   DATETIME,
    letzterfehler     DATETIME
);

-- M5.2.1

-- M5.4.1

-- M5.4.